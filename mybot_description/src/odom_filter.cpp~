#include "ros/ros.h"
#include <tf/transform_broadcaster.h>
#include <nav_msgs/Odometry.h>
#include "std_msgs/String.h"
#include <geometry_msgs/Twist.h>
#include <turtlesim/Pose.h>
#include <string>
#include <cmath>
#include <iostream>
#include <unistd.h>
#include <std_msgs/Float32.h>
using namespace std;

nav_msgs::Odometry::ConstPtr& msg2;

void chatterCallback(const nav_msgs::Odometry::ConstPtr& msg)
{
  double alpha=0.8;
  msg2->header.seq = alpha*(msg->header.seq)+(1-alpha)*msg2->header.seq;
  msg2->pose.pose.position.x=alpha*(msg->pose.pose.position.x)+(1-alpha)*msg2->pose.pose.position.x;
  msg2->pose.pose.position.y=alpha*(msg->pose.pose.position.y)+(1-alpha)*msg2->pose.pose.position.y;
  msg2->pose.pose.position.z=alpha*(msg->pose.pose.position.z)+(1-alpha)*msg2->pose.pose.position.z;
  msg2->pose.pose.orientation.x=alpha*(msg->pose.pose.orientation.x)+(1-alpha)*msg2->pose.pose.orientation.x;
  msg2->pose.pose.orientation.y=alpha*(msg->pose.pose.orientation.y)+(1-alpha)*msg2->pose.pose.orientation.y;
  msg2->pose.pose.orientation.z=alpha*(msg->pose.pose.orientation.z)+(1-alpha)*msg2->pose.pose.orientation.z;
  msg2->pose.pose.orientation.w=alpha*(msg->pose.pose.orientation.w)+(1-alpha)*msg2->pose.pose.orientation.w;
  msg2->twist.twist.linear.x=alpha*(msg->twist.twist.linear.x)+(1-alpha)*msg2->twist.twist.linear.x;
  msg2->twist.twist.angular.z=alpha*(msg->twist.twist.angular.z)+(1-alpha)*msg2->twist.twist.angular.z;
}


int main(int argc, char **argv)
{
  ros::init(argc, argv, "odom_filter");
  ros::NodeHandle n;
  ros::Publisher odom_pub = n.advertise<nav_msgs::Odometry>("odom", 50);
  tf::TransformBroadcaster odom_broadcaster;

  ros::Subscriber sub = n.subscribe("/odom_noisy", 1,&chatterCallback);


  ros::Time current_time;
  current_time = ros::Time::now();
  ros::Rate rate(2);

 while(ros::ok()){
    rate.sleep();
    odom_pub.publish(msg2);
    ros::spinOnce();

  }
 }






